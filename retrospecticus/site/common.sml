(* Functions we want to use throughout the photo browser project.  This
 * includes HTML generation (I would much rather prefer developing a full
 * HTML system, but this will have to do for now) and higher-level
 * functions for generating entire sections of the site.
 *
 * $Id: common.sml,v 1.1.1.1 2004/01/04 17:53:20 chris Exp $
 *)
structure Common =
struct
   (* Crank off a <div>.  We can't call this "div" because of the top-level. *)
   fun emit_div "" s =
          "<div>\n\t" ^ s ^ "\n</div>\n"
     | emit_div style s =
          "<div class=\"" ^ style ^ "\">\n\t" ^ s ^ "\n</div>\n"

   (* Link to another document. *)
   fun link href s =
      "<a href=\"" ^ href ^ "\">" ^ s ^ "</a>"

   (* Make a form. *)
   fun form method action s =
      "<form method=\"" ^ method ^ "\" action=\"" ^ action ^ 
         "\" enctype=\"application/x-www-form-urlencoded\">\n" ^ s ^
         "\n</form>\n"

   (* Build one element of a table row. *)
   fun td s =
      "\t<td>" ^ s ^ "</td>\n"

   (* Build a table row from a list of strings that need converting into
    * elements first.
    *)
   fun tr lst =
   let
      fun mk_tr ((ele::lst), s) =
             mk_tr (lst, (s ^ td ele))
        | mk_tr ([], s) =
             "<tr>\n" ^ s ^ "</tr>\n"
   in
      mk_tr (lst, "")
   end

   (* Title. *)
   fun title s =
      "\t<title>Retrospecticus @ bangmoney.org :: " ^ s ^ "</title>\n"

   fun header t style =
      "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" ^
      "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n" ^
      "\"http://www.w3c.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\n" ^
      "<html xmlns=\"http://www.w3c.org/1999/xthml\" xml:lang=\"en\">\n" ^
      "<head>\n" ^
      (title t) ^
      "\t<meta http-equiv=\"Content-Type\" content=\"text/html; " ^
         "charset=utf-8\" />\n" ^
      "\t<style type=\"text/css\" media=\"all\">\n" ^
      "\t\t@import \"" ^ style ^ "\";\n" ^
      "\t</style>\n" ^
      "</head>\n\n" ^
      "<body>\n\n"

   (* If someone's logged in, display a different box of links than if 
    * we're just building the page for some random guest.
    *)
   fun linkbox cookie_env param_env =
   let
      fun mk_text lst =
         String.concat (Cl.Lst.interleave lst " <b>&middot;</b> ")

      val login_name = User.logged_in cookie_env param_env
      val dir = Option.getOpt (Env.find param_env "dir", "/")
   in
      case login_name of
         SOME name =>
            emit_div "linkbox"
                     (mk_text [link ("logout.sml?dir=" ^ dir) "logout",
                               (* link "profile.sml" "change profile", *)
                               link ("add_col.sml?dir=" ^ dir)
                                    "add collection here",
                               link ("upload.sml?dir=" ^ dir)
                                    "upload pictures here"
                              ])
       | NONE =>
            emit_div "linkbox"
                     (mk_text [link ("login.sml?dir=" ^ dir) "login",
                               link ("new_acct.sml?dir=" ^ dir)
                                    "create account"])
   end

   (* Every page needs a copyright message at the bottom. *)
   fun copyright () =
      emit_div "footerbox"
               ("This page was generated by SML/NJ.\n" ^ "\t<br />" ^
                link (Config.page_url ^ "copyright.sml")
                     "copyright and terms of use page")

   (* Close out the page. *)
   fun footer () =
      "</body>\n</html>"
end
